name: CI

on:
  push:
    paths-ignore:
      - "**/*.md"
      - "docs/**"
  pull_request:
    paths-ignore:
      - "**/*.md"
      - "docs/**"
  workflow_dispatch:

env:
  ROCKSPEC_VERSION: 0.0.1
  DEV_ROCKSPEC: lua-pcg-dev-1.rockspec

jobs:

  c89-build:
    name: Build C89
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    strategy:
      fail-fast: false

      matrix:

        lua-version:
          - 5.1.5
          - 5.2.4
          - 5.3.6
          - 5.4.8

        extra-cflags:
          - { count: 0, value: '' }
          - { count: 1, value: 'LUA_PCG_FORCE_U64_EMULATED' }
          - { count: 1, value: 'LUA_PCG_FORCE_U128_EMULATED' }
          - { count: 2, value: 'LUA_PCG_FORCE_U64_EMULATED,LUA_PCG_FORCE_U128_EMULATED' }

    steps:

      - name: Validate Lua version, and set environment variables
        run: |
          if (-not ("${{ matrix.lua-version }}" -match "^(\d+)\.(\d+)(\.\d+)*$"))
          {
            Write-Host "Invalid Lua version (X.Y.Z) expected";
            exit 1;
          }

          $lua_short_version = "${{ matrix.lua-version }}" -split "\." |
            Select-Object -First 2 |
            Join-String -Separator ".";

          Add-Content "${{ github.env }}" "LUA_SHORT_VERSION=${lua_short_version}";

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: lua-pcg

      - name: Download and extract Lua ${{ matrix.lua-version }} source code, and set environment variables
        run: |
          $targz = "lua-${{ matrix.lua-version }}.tar.gz";
          $targz_path = Join-Path -Path "${{ runner.temp }}" -ChildPath $targz;

          Invoke-WebRequest -Uri "https://lua.org/ftp/${targz}" -OutFile "$targz_path";
          tar -C "${{ runner.temp }}" -xf "$targz_path";

          $lua_source_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "lua-${{ matrix.lua-version }}";

          if (-not (Test-Path $lua_source_dir))
          {
            $color = (0x1b -as [char]) + "[36m";

            Write-Host "Unable to find Lua source code directory: ${color}${lua_source_dir}";

            exit 1;
          }

          $install_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "installed-lua-${{ matrix.lua-version }}";

          Add-Content "${{ github.env }}" "LUA_SRC_DIR=${lua_source_dir}";
          Add-Content "${{ github.env }}" "LUA_DIR=${install_dir}";

      - name: Set environment variables depending on Lua version for C89 make targets
        run: |
          $c89_target = "all";
          $c89_src_dir = Join-Path -Path "${{ env.LUA_SRC_DIR }}" -ChildPath "src";

          if ("5.1", "5.2" -contains "${{ env.LUA_SHORT_VERSION }}")
          {
            $cc = "gcc";
            $c89_cflags_name = "MYCFLAGS";
            $c89_libs_name = "MYLIBS";
            $c89_macro = "LUA_ANSI";
          }
          else
          {
            $cc = "gcc -std=c89 -pedantic";
            $c89_cflags_name = "MYCFLAGS";
            $c89_libs_name = "SYSLIBS";
            $c89_macro = "LUA_USE_C89";
          }

          Add-Content "${{ github.env }}" "CC=${cc}";
          Add-Content "${{ github.env }}" "C89_SRC_DIR=${c89_src_dir}";
          Add-Content "${{ github.env }}" "C89_CFLAGS_NAME=${c89_cflags_name}";
          Add-Content "${{ github.env }}" "C89_LIBS_NAME=${c89_libs_name}";
          Add-Content "${{ github.env }}" "C89_TARGET=${c89_target}";
          Add-Content "${{ github.env }}" "C89_MACRO=${c89_macro}";

      - name: Build Lua ${{ matrix.lua-version }}
        run: |
          make -C "${{ env.C89_SRC_DIR }}" `
            "${{ env.C89_TARGET }}" `
            "${{ env.C89_CFLAGS_NAME }}=-D${{ env.C89_MACRO }} -DLUA_USE_DLOPEN" `
            "${{ env.C89_LIBS_NAME }}=-Wl,-E -ldl" `
            "CC=${{ env.CC }}";

      - name: Install Lua ${{ matrix.lua-version }}, and set environment variables
        run: |
          make -C "${{ env.LUA_SRC_DIR }}" `
            install `
            "INSTALL_TOP=${{ env.LUA_DIR }}";

          $lua_bindir = Join-Path -Path "${{ env.LUA_DIR }}" -ChildPath "bin";
          $lua_incdir = Join-Path -Path "${{ env.LUA_DIR }}" -ChildPath "include";

          Add-Content "${{ github.path }}" "${lua_bindir}";
          Add-Content "${{ github.env }}" "LUA_INCDIR=${lua_incdir}";

      - name: Compile lua-pcg
        working-directory: lua-pcg
        run: |
          if ("${{ matrix.extra-cflags.count }}" -eq "0")
          {
            ${{ env.CC }} `
              "-O2" `
              "-Wall" `
              "-c" `
              "-fPIC" `
              "-o" "src/lua-pcg.o" `
              "-I${{ env.LUA_INCDIR }}" `
              "-Isrc" `
              "-D${{ env.C89_MACRO }}" `
              "-DLUA_USE_DLOPEN" `
              "-DNDEBUG" `
              "-D_NDEBUG" `
              "-DLUA_PCG_BUILD_SHARED" `
              "src/lua-pcg.c";
          }
          elseif ("${{ matrix.extra-cflags.count }}" -eq "1")
          {
            ${{ env.CC }} `
              "-O2" `
              "-Wall" `
              "-c" `
              "-fPIC" `
              "-o" "src/lua-pcg.o" `
              "-I${{ env.LUA_INCDIR }}" `
              "-Isrc" `
              "-D${{ env.C89_MACRO }}" `
              "-D${{ matrix.extra-cflags.value }}" `
              "-DLUA_USE_DLOPEN" `
              "-DNDEBUG" `
              "-D_NDEBUG" `
              "-DLUA_PCG_BUILD_SHARED" `
              "src/lua-pcg.c";
          }
          elseif ("${{ matrix.extra-cflags.count }}" -eq "2")
          {
            $extra_cflags = "${{ matrix.extra-cflags.value }}" -split ",";
            $extra_cflags_1 = $extra_cflags[0];
            $extra_cflags_2 = $extra_cflags[1];

            ${{ env.CC }} `
              "-O2" `
              "-Wall" `
              "-c" `
              "-fPIC" `
              "-o" "src/lua-pcg.o" `
              "-I${{ env.LUA_INCDIR }}" `
              "-Isrc" `
              "-D${{ env.C89_MACRO }}" `
              "-D${extra_cflags_1}" `
              "-D${extra_cflags_2}" `
              "-DLUA_USE_DLOPEN" `
              "-DNDEBUG" `
              "-D_NDEBUG" `
              "-DLUA_PCG_BUILD_SHARED" `
              "src/lua-pcg.c";
          }
          else
          {
            $color = (0x1b -as [char]) + "[36m";

            Write-Host "Unknown number of extra cflags: ${color}${{ matrix.extra-cflags.count }}";

            exit 1;
          }

      - name: Link lua-pcg
        working-directory: lua-pcg
        run: |
          ${{ env.CC }} "-shared" `
            "-o" "lua-pcg.so" `
            "src/lua-pcg.o";

      - name: Run tests
        working-directory: lua-pcg
        run: |
          Get-ChildItem "tests" -Recurse -File |
            Where-Object Extension -EQ ".lua" |
            Select-Object -ExpandProperty FullName |
            Foreach-Object {
              $color = (0x1b -as [char]) + "[36m";

              Write-Host "Running test file: ${color}$_";

              lua "$_";

              if ($LASTEXITCODE -ne 0)
              {
                exit 1;
              }
            };

  cplusplus-build:
    name: Build C++
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    strategy:
      fail-fast: false

      matrix:

        lua-version:
          - 5.1.5
          - 5.2.4
          - 5.3.6
          - 5.4.8

        use-clang:
          - 'true'
          - 'false'

    steps:

      - name: Validate Lua version
        run: |
          if (-not ("${{ matrix.lua-version }}" -match "^(\d+)\.(\d+)(\.\d+)*$"))
          {
            Write-Host "Invalid Lua version (X.Y.Z) expected";
            exit 1;
          }

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: lua-pcg

      - name: Install dependencies
        run: sudo apt install -y libreadline-dev

      - name: Install clang
        if: ${{ matrix.use-clang == 'true' }}
        run: sudo apt install -y clang

      - name: Download and extract Lua ${{ matrix.lua-version }} source code, and set environment variables
        run: |
          $targz = "lua-${{ matrix.lua-version }}.tar.gz";
          $targz_path = Join-Path -Path "${{ runner.temp }}" -ChildPath $targz;

          Invoke-WebRequest -Uri "https://lua.org/ftp/${targz}" -OutFile "$targz_path";
          tar -C "${{ runner.temp }}" -xf "$targz_path";

          $lua_source_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "lua-${{ matrix.lua-version }}";

          if (-not (Test-Path $lua_source_dir))
          {
            $color = (0x1b -as [char]) + "[36m";

            Write-Host "Unable to find Lua source code directory: ${color}${lua_source_dir}";

            exit 1;
          }

          $install_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "installed-lua-${{ matrix.lua-version }}";

          if ("${{ matrix.use-clang }}" -eq "true")
          {
            Add-Content "${{ github.env }}" "CC=clang++";
          }
          else
          {
            Add-Content "${{ github.env }}" "CC=g++";
          }
          Add-Content "${{ github.env }}" "LUA_SRC_DIR=${lua_source_dir}";
          Add-Content "${{ github.env }}" "LUA_DIR=${install_dir}";

      - name: Build Lua ${{ matrix.lua-version }}
        run: |
          make -C "${{ env.LUA_SRC_DIR }}" `
            linux `
            "CC=${{ env.CC }}";

      - name: Install Lua ${{ matrix.lua-version }}, and set environment variables
        run: |
          make -C "${{ env.LUA_SRC_DIR }}" `
            install `
            "INSTALL_TOP=${{ env.LUA_DIR }}";

          $lua_bindir = Join-Path -Path "${{ env.LUA_DIR }}" -ChildPath "bin";
          $lua_incdir = Join-Path -Path "${{ env.LUA_DIR }}" -ChildPath "include";

          Add-Content "${{ github.path }}" "${lua_bindir}";
          Add-Content "${{ github.env }}" "LUA_INCDIR=${lua_incdir}";

      - name: Compile lua-pcg
        working-directory: lua-pcg
        run: |
          ${{ env.CC }} `
            "-O2" `
            "-Wall" `
            "-c" `
            "-fPIC" `
            "-o" "src/lua-pcg.o" `
            "-I${{ env.LUA_INCDIR }}" `
            "-Isrc" `
            "-DNDEBUG" `
            "-D_NDEBUG" `
            "-DLUA_PCG_BUILD_SHARED" `
            "src/lua-pcg.c";

      - name: Link lua-pcg
        working-directory: lua-pcg
        run: |
          ${{ env.CC }} "-shared" `
            "-o" "lua-pcg.so" `
            "src/lua-pcg.o";

      - name: Run tests
        working-directory: lua-pcg
        run: |
          Get-ChildItem "tests" -Recurse -File |
            Where-Object Extension -EQ ".lua" |
            Select-Object -ExpandProperty FullName |
            Foreach-Object {
              $color = (0x1b -as [char]) + "[36m";

              Write-Host "Running test file: ${color}$_";

              lua "$_";

              if ($LASTEXITCODE -ne 0)
              {
                exit 1;
              }
            };

  clang-build:
    name: Clang Build
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    strategy:
      fail-fast: false

      matrix:

        lua-version:
          - 5.1.5
          - 5.2.4
          - 5.3.6
          - 5.4.8

        extra-cflags:
          - { count: 0, value: '' }
          - { count: 1, value: 'LUA_PCG_FORCE_U64_EMULATED' }
          - { count: 1, value: 'LUA_PCG_FORCE_U128_EMULATED' }
          - { count: 2, value: 'LUA_PCG_FORCE_U64_EMULATED,LUA_PCG_FORCE_U128_EMULATED' }

    steps:

      - name: Validate Lua version
        run: |
          if (-not ("${{ matrix.lua-version }}" -match "^(\d+)\.(\d+)(\.\d+)*$"))
          {
            Write-Host "Invalid Lua version (X.Y.Z) expected";
            exit 1;
          }

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: lua-pcg

      - name: Install dependencies
        run: sudo apt install -y libreadline-dev clang

      - name: Download and extract Lua ${{ matrix.lua-version }} source code, and set environment variables
        run: |
          $targz = "lua-${{ matrix.lua-version }}.tar.gz";
          $targz_path = Join-Path -Path "${{ runner.temp }}" -ChildPath $targz;

          Invoke-WebRequest -Uri "https://lua.org/ftp/${targz}" -OutFile "$targz_path";
          tar -C "${{ runner.temp }}" -xf "$targz_path";

          $lua_source_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "lua-${{ matrix.lua-version }}";

          if (-not (Test-Path $lua_source_dir))
          {
            $color = (0x1b -as [char]) + "[36m";

            Write-Host "Unable to find Lua source code directory: ${color}${lua_source_dir}";

            exit 1;
          }

          $install_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "installed-lua-${{ matrix.lua-version }}";

          Add-Content "${{ github.env }}" "CC=clang";
          Add-Content "${{ github.env }}" "LUA_SRC_DIR=${lua_source_dir}";
          Add-Content "${{ github.env }}" "LUA_DIR=${install_dir}";

      - name: Build Lua ${{ matrix.lua-version }}
        run: |
          make -C "${{ env.LUA_SRC_DIR }}" `
            linux `
            "CC=${{ env.CC }}";

      - name: Install Lua ${{ matrix.lua-version }}, and set environment variables
        run: |
          make -C "${{ env.LUA_SRC_DIR }}" `
            install `
            "INSTALL_TOP=${{ env.LUA_DIR }}";

          $lua_bindir = Join-Path -Path "${{ env.LUA_DIR }}" -ChildPath "bin";
          $lua_incdir = Join-Path -Path "${{ env.LUA_DIR }}" -ChildPath "include";

          Add-Content "${{ github.path }}" "${lua_bindir}";
          Add-Content "${{ github.env }}" "LUA_INCDIR=${lua_incdir}";

      - name: Compile lua-pcg
        working-directory: lua-pcg
        run: |
          if ("${{ matrix.extra-cflags.count }}" -eq "0")
          {
            ${{ env.CC }} `
              "-O2" `
              "-Wall" `
              "-c" `
              "-fPIC" `
              "-o" "src/lua-pcg.o" `
              "-I${{ env.LUA_INCDIR }}" `
              "-Isrc" `
              "-DNDEBUG" `
              "-D_NDEBUG" `
              "-DLUA_PCG_BUILD_SHARED" `
              "src/lua-pcg.c";
          }
          elseif ("${{ matrix.extra-cflags.count }}" -eq "1")
          {
            ${{ env.CC }} `
              "-O2" `
              "-Wall" `
              "-c" `
              "-fPIC" `
              "-o" "src/lua-pcg.o" `
              "-I${{ env.LUA_INCDIR }}" `
              "-Isrc" `
              "-D${{ matrix.extra-cflags.value }}" `
              "-DNDEBUG" `
              "-D_NDEBUG" `
              "-DLUA_PCG_BUILD_SHARED" `
              "src/lua-pcg.c";
          }
          elseif ("${{ matrix.extra-cflags.count }}" -eq "2")
          {
            $extra_cflags = "${{ matrix.extra-cflags.value }}" -split ",";
            $extra_cflags_1 = $extra_cflags[0];
            $extra_cflags_2 = $extra_cflags[1];

            ${{ env.CC }} `
              "-O2" `
              "-Wall" `
              "-c" `
              "-fPIC" `
              "-o" "src/lua-pcg.o" `
              "-I${{ env.LUA_INCDIR }}" `
              "-Isrc" `
              "-D${extra_cflags_1}" `
              "-D${extra_cflags_2}" `
              "-DNDEBUG" `
              "-D_NDEBUG" `
              "-DLUA_PCG_BUILD_SHARED" `
              "src/lua-pcg.c";
          }
          else
          {
            $color = (0x1b -as [char]) + "[36m";

            Write-Host "Unknown number of extra cflags: ${color}${{ matrix.extra-cflags.count }}";

            exit 1;
          }

      - name: Link lua-pcg
        working-directory: lua-pcg
        run: |
          ${{ env.CC }} "-shared" `
            "-o" "lua-pcg.so" `
            "src/lua-pcg.o";

      - name: Run tests
        working-directory: lua-pcg
        run: |
          Get-ChildItem "tests" -Recurse -File |
            Where-Object Extension -EQ ".lua" |
            Select-Object -ExpandProperty FullName |
            Foreach-Object {
              $color = (0x1b -as [char]) + "[36m";

              Write-Host "Running test file: ${color}$_";

              lua "$_";

              if ($LASTEXITCODE -ne 0)
              {
                exit 1;
              }
            };

  build:
    name: Build
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: pwsh

    strategy:
      fail-fast: false

      matrix:

        lua-version:
          - 5.1
          - 5.2
          - 5.3
          - 5.4
          - luajit
          - luajit-openresty

        os:
          - windows-latest
          - windows-11-arm
          - ubuntu-latest
          - ubuntu-24.04-arm
          - macos-latest

    steps:

      - name: Set environment variable to hold the rockspec name
        run: |
          if ("${{ github.repository }}" -eq "luau-project/lua-pcg" -and "${{ github.ref_name }}" -eq "v${{ env.ROCKSPEC_VERSION }}" -and "${{ github.ref }}" -eq "refs/tags/v${{ env.ROCKSPEC_VERSION }}")
          {
            Add-Content "${{ github.env }}" "ROCKSPEC=lua-pcg-${{ env.ROCKSPEC_VERSION }}-1.rockspec";
          }
          else
          {
            Add-Content "${{ github.env }}" "ROCKSPEC=${{ env.DEV_ROCKSPEC }}";
          }

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: lua-pcg

      - name: Setup MSVC dev-prompt
        if: ${{ runner.os == 'Windows' && !startsWith(matrix.lua-version, 'luajit') }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Lua
        uses: luarocks/gh-actions-lua@master
        with:
          luaVersion: ${{ matrix.lua-version }}
          buildCache: false

      - name: Setup LuaRocks
        uses: luarocks/gh-actions-luarocks@master

      - name: Lint rockspecs
        working-directory: lua-pcg
        run: |
          Get-ChildItem . -Recurse -File |
            Where-Object Extension -Eq ".rockspec" |
            Select-Object -ExpandProperty FullName |
            Foreach-Object {
              $color = (0x1b -as [char]) + "[36m";

              Write-Host "Linting rockspec: ${color}$_";

              luarocks lint "$_";

              if ($LASTEXITCODE -ne 0)
              {
                exit 1;
              }
            }

      - name: Build lua-pcg
        working-directory: lua-pcg
        run: |
          $rockspec = Get-ChildItem . -Recurse -File |
            Where-Object Name -EQ "${{ env.ROCKSPEC }}" |
            Select-Object -ExpandProperty FullName -First 1;

          $color = (0x1b -as [char]) + "[36m";
          Write-Host "Building rockspec file: ${color}${rockspec}";

          luarocks make $rockspec;

      - name: Run tests
        working-directory: lua-pcg
        run: |
          Get-ChildItem "tests" -Recurse -File |
            Where-Object Extension -EQ ".lua" |
            Select-Object -ExpandProperty FullName |
            Foreach-Object {
              $color = (0x1b -as [char]) + "[36m";

              Write-Host "Running test file: ${color}$_";

              lua "$_";

              if ($LASTEXITCODE -ne 0)
              {
                exit 1;
              }
            };

  msys2-build:
    name: MSYS2 Build
    runs-on: ${{ matrix.MSYS2_CONFIG.os }}

    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: false

      matrix:

        MSYS2_CONFIG:
          - { sys: mingw64, env: x86_64, os: windows-latest }
          - { sys: ucrt64, env: ucrt-x86_64, os: windows-latest }
          - { sys: clang64, env: clang-x86_64, os: windows-latest }
          - { sys: clangarm64, env: clang-aarch64, os: windows-11-arm }

        Lua:
          - { version: '5.4', msys2-pkg-name: 'lua', msys2-lua-interpreter: 'lua' }
          - { version: '5.3', msys2-pkg-name: 'lua53', msys2-lua-interpreter: 'lua5.3' }
          - { version: '5.1', msys2-pkg-name: 'lua51', msys2-lua-interpreter: 'lua5.1' }
          - { version: '5.1', msys2-pkg-name: 'luajit', msys2-lua-interpreter: 'luajit' }

    env:
      LUA_INTERPRETER: /${{ matrix.MSYS2_CONFIG.sys }}/bin/${{ matrix.Lua.msys2-lua-interpreter }}

    steps:

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.MSYS2_CONFIG.sys }}
          install: |
            base-devel
            git
            mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-cc
            mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-${{ matrix.Lua.msys2-pkg-name }}
            mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-lua-luarocks

      - name: Set environment variable to hold the rockspec name
        run: |
          if [[ "${{ github.repository }}" == "luau-project/lua-pcg" ]] && [[ "${{ github.ref_name }}" == "v${{ env.ROCKSPEC_VERSION }}" ]] && [[ "${{ github.ref }}" == "refs/tags/v${{ env.ROCKSPEC_VERSION }}" ]];
          then
            echo "ROCKSPEC=lua-pcg-${{ env.ROCKSPEC_VERSION }}-1.rockspec" >> "${{ github.env }}";
          else
            echo "ROCKSPEC=${{ env.DEV_ROCKSPEC }}" >> "${{ github.env }}";
          fi;

      - name: Configure LuaRocks
        run: |
          source /etc/makepkg_mingw.conf
          echo "CC=/${{ matrix.MSYS2_CONFIG.sys }}/bin/${CC}" >> "${{ github.env }}"
          echo "CFLAGS=${CFLAGS}" >> "${{ github.env }}"
          luarocks config lua_version "${{ matrix.Lua.version }}"
          luarocks config lua_dir "/${{ matrix.MSYS2_CONFIG.sys }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: lua-pcg

      - name: Lint rockspecs
        working-directory: lua-pcg
        run: |
          for rockspec in rockspecs/*.rockspec;
          do
            echo -e "Linting rockspec: \e[36m${rockspec}\e[0m";
            luarocks lint "${rockspec}";
          done;

      - name: Build lua-pcg
        working-directory: lua-pcg
        run: |
          rockspec="rockspecs/${{ env.ROCKSPEC }}";
          echo -e "Building rockspec: \e[36m${rockspec}\e[0m";

          luarocks make ${rockspec};

      - name: Run tests
        working-directory: lua-pcg
        run: |
          for test in tests/*.lua;
          do
            echo -e "Running test file: \e[36m${test}\e[0m"

            ${{ env.LUA_INTERPRETER }} $test;
          done;

  cygwin-build:
    name: Cygwin Build
    runs-on: windows-latest

    env:
      LUAROCKS_VERSION: 3.12.1
      CYGWIN_NOWINPATH: 1
      CHERE_INVOKING: 1
      CYGWIN_INSTALL_DIR: C:\cygwin64

    steps:
      - name: Set environment variable to hold the rockspec name
        run: |
          if ("${{ github.repository }}" -eq "luau-project/lua-pcg" -and "${{ github.ref_name }}" -eq "v${{ env.ROCKSPEC_VERSION }}" -and "${{ github.ref }}" -eq "refs/tags/v${{ env.ROCKSPEC_VERSION }}")
          {
            Add-Content "${{ github.env }}" "ROCKSPEC=lua-pcg-${{ env.ROCKSPEC_VERSION }}-1.rockspec";
          }
          else
          {
            Add-Content "${{ github.env }}" "ROCKSPEC=${{ env.DEV_ROCKSPEC }}";
          }

      - name: Override git autocrlf to input before checkout
        run: git config --global core.autocrlf input

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: lua-pcg

      - name: Setup Cygwin
        uses: cygwin/cygwin-install-action@v5
        with:
          platform: x86_64
          install-dir: ${{ env.CYGWIN_INSTALL_DIR }}
          packages: |
            coreutils,
            wget,
            gcc-g++,
            make,
            patch,
            lua,
            liblua-devel,
            unzip

      - name: Set environment variables to hold Cygwin applications for usage from pwsh
        run: |
          $bash = Join-Path -Path ${{ env.CYGWIN_INSTALL_DIR }} -ChildPath "bin" |
            Join-Path -ChildPath "bash";
          $cygpath = Join-Path -Path ${{ env.CYGWIN_INSTALL_DIR }} -ChildPath "bin" |
            Join-Path -ChildPath "cygpath";

          Add-Content "${{ github.env }}" "CYGWIN_BASH=${bash}";
          Add-Content "${{ github.env }}" "CYGWIN_CYGPATH=${cygpath}";

      - name: Create a patch to apply to LuaRocks tarball
        run: |
          $cygwin_patch = "diff -Naur a/GNUmakefile b/GNUmakefile",
          "--- a/GNUmakefile    2024-05-31 14:38:00.000000000 -0300",
          "+++ b/GNUmakefile    2025-02-05 18:48:47.060175879 -0300",
          "@@ -8,7 +8,7 @@",
          " INSTALL_DATA = `$(INSTALL) -m 644",
          " BINARY_PLATFORM = unix",
          " ",
          "-SHEBANG = \#!`$(LUA)",
          "+SHEBANG = \#!/bin/env lua",
          " luarocksconfdir = `$(sysconfdir)/luarocks",
          " luadir = `$(datarootdir)/lua/`$(LUA_VERSION)",
          " builddir = ./build",
          "";

          $cygwin_patch_content = $cygwin_patch |
            Join-String -Separator "`n";

          $patch_path = Join-Path -Path "${{ runner.temp }}" -ChildPath "cygwin-luarocks-3.12.1.patch";

          Set-Content $patch_path $cygwin_patch_content -NoNewline;

          $cygwinpath_for_patch = ${{ env.CYGWIN_CYGPATH }} $patch_path;
          Add-Content "${{ github.env }}" "CYGWIN_PATCH_FILENAME=${cygwinpath_for_patch}";
          Add-Content "${{ github.env }}" "PWSH_CYGWIN_PATCH_FILENAME=${patch_path}";

      - name: Download, configure and install LuaRocks
        run: |
          $color = (0x1b -as [char]) + "[36m";

          Write-Host "Downloading LuaRocks from ${color}https://luarocks.org/releases/luarocks-${{ env.LUAROCKS_VERSION }}.tar.gz";
          ${{ env.CYGWIN_BASH }} -lc "wget https://luarocks.org/releases/luarocks-${{ env.LUAROCKS_VERSION }}.tar.gz -P/tmp";

          Write-Host "Extracting LuaRocks tarball: ${color}/tmp/luarocks-${{ env.LUAROCKS_VERSION }}.tar.gz";
          ${{ env.CYGWIN_BASH }} -lc "tar -C /tmp -xf /tmp/luarocks-${{ env.LUAROCKS_VERSION }}.tar.gz";

          Write-Host "Patching LuaRocks with ${color}${{ env.CYGWIN_PATCH_FILENAME }}";
          Write-Host "    which has the following content:";

          $color_patch_content = (0x1b -as [char]) + "[33m";
          Get-Content "${{ env.PWSH_CYGWIN_PATCH_FILENAME }}" | ForEach-Object { Write-Host "${color_patch_content}$_"; }
          ${{ env.CYGWIN_BASH }} -lc "cd /tmp/luarocks-${{ env.LUAROCKS_VERSION }} && patch -Np1 -i ""${{ env.CYGWIN_PATCH_FILENAME }}""";

          Write-Host "Configuring, making and installing LuaRocks at ${color}/usr";
          ${{ env.CYGWIN_BASH }} -lc "cd /tmp/luarocks-${{ env.LUAROCKS_VERSION }} && ./configure --prefix=/usr && make && make install";

          Write-Host "Writing a shell entry loading LuaRocks variables to file: ${color}/etc/profile.d/luarocks.sh";
          ${{ env.CYGWIN_BASH }} -lc "echo 'eval `$(luarocks path)' > /etc/profile.d/luarocks.sh";

      - name: Lint rockspecs
        working-directory: lua-pcg
        run: |
          ${{ env.CYGWIN_BASH }} -lc "for rockspec in rockspecs/*.rockspec; do echo -e ""Linting rockspec: \e[36m`${rockspec}\e[0m""; luarocks lint ""`${rockspec}""; done";

      - name: Build lua-pcg
        working-directory: lua-pcg
        run: |
          ${{ env.CYGWIN_BASH }} -lc "rockspec=""rockspecs/${{ env.ROCKSPEC }}""; echo -e ""Building rockspec: \e[36m`${rockspec}\e[0m""; luarocks make `${rockspec};";

      - name: Run tests
        working-directory: lua-pcg
        run: |
          ${{ env.CYGWIN_BASH }} -lc "for test in tests/*.lua; do echo -e ""Running test file: \e[36m`${test}\e[0m""; env lua `$test; done;";
